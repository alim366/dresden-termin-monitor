name: Dresden Termin Monitor (Telegram)

on:
  schedule:
    - cron: "*/5 * * * *" # every 5 minutes (UTC)
  workflow_dispatch:      # manual run

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Berlin
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create package.json
        run: |
          cat > package.json << 'EOF'
          {
            "name": "dresden-termin-monitor",
            "version": "1.0.0",
            "private": true,
            "type": "module",
            "scripts": {
              "check": "node check.js"
            },
            "dependencies": {
              "playwright": "^1.48.2"
            }
          }
          EOF

      - name: Install dependencies & browser
        run: |
          npm install --no-audit --no-fund
          npx playwright install --with-deps chromium

      - name: Write checker script
        run: |
          cat > check.js << 'EOF'
          import { chromium } from "playwright";

          const URL = "https://termine-buergerbuero.dresden.de/select2?md=1";
          const SERVICE_TEXTS = [
            "Antragsabgabe Einbürgerung",
            "Einbürgerung",
            "Staatsangehörigkeit"
          ];

          const WINDOW = { startHour: 6, endHour: 19 };

          const NO_PATTERNS = [
            /keine\s+freien\s+Termine/i,
            /Zur\s*Zeit.*keine\s+Termine/i,
            /Aktuell\s+sind\s+keine\s+Termine/i,
            /Es\s+sind\s+keine\s+Termine/i,
            /Derzeit\s+stehen\s+keine\s+Termine/i
          ];

          function withinWindow() {
            const fmt = new Intl.DateTimeFormat("de-DE", {
              timeZone: "Europe/Berlin",
              hour: "2-digit",
              hour12: false
            });
            const h = parseInt(fmt.format(new Date()), 10);
            return h >= WINDOW.startHour && h < WINDOW.endHour;
          }

          async function notifyTelegram(title, message) {
            const token = process.env.TELEGRAM_TOKEN;
            const chatId = process.env.TELEGRAM_CHAT_ID;
            if (!token || !chatId) return;

            const text = `*${title}*\n${message}\n[Open booking page](${URL})`;

            await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                chat_id: chatId,
                text,
                parse_mode: "Markdown"
              })
            }).catch(() => {});
          }

          const uniq = (arr) => [...new Set(arr)];

          function extractSlots(text) {
            const dateRegex1 = /(\d{2}\.\d{2}\.\d{4})/;
            const dateRegex2 = /(?:Mo|Di|Mi|Do|Fr|Sa|So)[.,]?\s+(\d{2}\.\d{2}\.\d{4})/i;
            const timeRegex = /\b([01]?\d|2[0-3]):([0-5]\d)\b/g;

            const dateMatch = text.match(dateRegex1) || text.match(dateRegex2);
            const timesRaw = text.match(timeRegex) || [];
            const times = uniq(timesRaw.map((t) => t.trim()));

            const locMatch = text.match(/Standort[:\s]*([A-Za-zÄÖÜäöüß\-\s\/]+)</i);
            const location = locMatch ? locMatch[1].trim() : null;

            return {
              date: dateMatch ? (dateMatch[1] || dateMatch[0]) : null,
              times,
              location
            };
          }

          (async () => {
            try {
              if (!withinWindow()) process.exit(0);

              const browser = await chromium.launch({ headless: true });
              const ctx = await browser.newContext({
                locale: "de-DE",
                timezoneId: "Europe/Berlin"
              });
              const page = await ctx.newPage();

              await page.goto(URL, {
                waitUntil: "domcontentloaded",
                timeout: 60000
              });

              // cookie / consent
              for (const label of ["OK", "Akzeptieren", "Einverstanden"]) {
                try {
                  const btn = page.getByRole("button", { name: label }).first();
                  if ((await btn.count()) > 0) {
                    await btn.click();
                    break;
                  }
                  const txt = page.getByText(label, { exact: true });
                  if ((await txt.count()) > 0) {
                    await txt.click();
                    break;
                  }
                } catch {}
              }

              // choose service
              try {
                for (const s of SERVICE_TEXTS) {
                  const service = page.getByText(s, { exact: false }).first();
                  if ((await service.count()) > 0) {
                    await service.click({ force: true });
                    break;
                  }
                  const label = page.locator(`label:has-text("${s}")`);
                  if ((await label.count()) > 0) {
                    await label.click({ force: true });
                    break;
                  }
                }
              } catch {}

              // go to calendar
              try {
                const weiter = page.getByRole("button", { name: /weiter/i }).first();
                if ((await weiter.count()) > 0) {
                  await weiter.click({ force: true });
                } else {
                  await page.locator("text=Weiter").first().click({ timeout: 5000 }).catch(() => {});
                }
              } catch {}

              await page.waitForTimeout(2500);

              const bodyText = await page.locator("body").innerText();

              if (NO_PATTERNS.some((rx) => rx.test(bodyText))) {
                await browser.close();
                process.exit(0);
              }

              const html = await page.content();
              const { date, times, location } = extractSlots(html + "\n" + bodyText);

              if (times.length > 0) {
                const top3 = times.slice(0, 3).join(", ");
                const parts = [];
                if (date) parts.push(`Date: ${date}`);
                parts.push(`Times: ${top3}`);
                if (location) parts.push(`Place: ${location}`);
                const msg = parts.join(" | ");
                await notifyTelegram("Einbürgerung Dresden – Slot available", msg);
              }

              await browser.close();
              process.exit(0);
            } catch {
              // silent on error
              process.exit(0);
            }
          })();
          EOF

      - name: Run checker
        run: npm run check
